:root {
  /* Netural */
  --grey: hsl(0, 0%, 50%);
  --grey-1: hsl(0, 0%, 30%);
  --grey-2: hsl(0, 0%, 15%);

  /* Blues */
  --Blue-1: hsl(234, 100%, 50%);
  --Blue-2: hsl(234, 100%, 35%);
  --Blue-3: hsl(234, 100%, 20%);
  /* Cyans */
  --Cyan-1: hsl(202, 100%, 50%);
  --Cyan-2: hsl(202, 100%, 35%);
  --Cyan-3: hsl(202, 100%, 20%);
}

.ViewPageContainer {
  display: flex;
  align-items: center;
  background-color: var(--grey-2);
  width: 100vw;
  height: 150vh;
}

.GraphContainer {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 1000px;
  height: 650px;

  left: 7%;
  bottom: 25%;
  border: 5px solid var(--grey-1);
  border-radius: 10px;
}

.PercentageContainer {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  left: 15%;
  bottom: 15%;

  width: 500px;
  height: 800px;
  border: 5px solid var(--grey-1);
}

.DataContainer {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  width: 100%;
  height: 40%;
  border: 5px solid var(--grey-1);
  bottom: -150vh;
}

.ButtonContainer {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  bottom: -35%;
}

.ButtonContainer button {
  width: 40%;
  height: 150px;
  border: none;
  border-radius: 10px;
  background-color: var(--grey-1);
  color: white;
  font-size: 1.5rem;
}

#pie {
  /* Changes the angle the graident goes to */
  --ng: 360deg;
  /* The thickness or the non transperent area of the gradient */
  --thickness: 10px;
  --_inner: calc(70% - var(--thickness));
  --_outer: calc(var(--_inner) + 1px);

  /* Uses the inner and outer values to hide or fill in the center leaving only the thickness*/
  mask: radial-gradient(circle, #0000 var(--_inner), #000 var(--_outer));

  /* the conic gradient, transparent after --ng */
  background-image: conic-gradient(
    cyan,
    deeppink,
    lightpink,
    cyan var(--ng),
    #0000 0
  );
}

#pie {
  aspect-ratio: 1/1;
  inline-size: 30vmin;
  border-radius: 50%;
}

/* Overall container */
.simple-bar-chart {
  --line-color: currentcolor;
  --line-opacity: 0.25;
  --item-gap: 2%;
  width: 100%;
  height: 100%;
  display: grid;
  position: relative;
  grid-auto-flow: column;
  gap: var(--item-gap);
  align-items: end;
  padding-inline: var(--item-gap);
  --padding-block: 1.5rem; /*space for labels*/
  padding-block: var(--padding-block);
}
/* The indivdual bars */
.simple-bar-chart > .item {
  height: calc(1% * var(--val));
  background-color: var(--clr);
  filter: drop-shadow(0 0 1rem var(--Shadow--clr));
  position: relative;
  animation: item-height 1s ease forwards;
}
@keyframes item-height {
  from {
    height: 0;
  }
}

.simple-bar-chart > .item > * {
  position: absolute;
  text-align: center;
}
.simple-bar-chart > .item > .label {
  inset: 100% 0 auto 0;
}
.simple-bar-chart > .item > .value {
  inset: auto 0 100% 0;
}
